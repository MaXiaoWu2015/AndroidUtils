package com.example.xiaowu.greendao.generate;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.xiaowu.greendao.Channel;

import com.example.xiaowu.greendao.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MessageTable".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MessageTable";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_server = new Property(1, int.class, "id_server", false, "ID_SERVER");
        public final static Property Msg_channel_id = new Property(2, Long.class, "msg_channel_id", false, "MSG_CHANNEL_ID");
        public final static Property Msg_title = new Property(3, String.class, "msg_title", false, "MSG_TITLE");
        public final static Property Msg_type = new Property(4, int.class, "msg_type", false, "MSG_TYPE");
        public final static Property Create_time = new Property(5, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Dead_time = new Property(6, long.class, "dead_time", false, "DEAD_TIME");
        public final static Property Is_read = new Property(7, int.class, "is_read", false, "ReadedFlag");
        public final static Property Is_in_list = new Property(8, int.class, "is_in_list", false, "IS_IN_LIST");
        public final static Property Notify_type = new Property(9, int.class, "notify_type", false, "NOTIFY_TYPE");
        public final static Property Popup_url = new Property(10, String.class, "popup_url", false, "POPUP_URL");
        public final static Property Is_pop = new Property(11, int.class, "is_pop", false, "IS_POP");
        public final static Property Is_server_deleted = new Property(12, int.class, "is_server_deleted", false, "IS_SERVER_DELETED");
        public final static Property Popup_bg_color = new Property(13, String.class, "popup_bg_color", false, "POPUP_BG_COLOR");
        public final static Property GotoType = new Property(14, int.class, "gotoType", false, "GOTO_TYPE");
        public final static Property GotoMode = new Property(15, int.class, "gotoMode", false, "GOTO_MODE");
        public final static Property GotoParam = new Property(16, String.class, "gotoParam", false, "GOTO_PARAM");
        public final static Property DetailBtn_text = new Property(17, String.class, "detailBtn_text", false, "DETAIL_BTN_TEXT");
        public final static Property DetailPics_url = new Property(18, String.class, "detailPics_url", false, "DETAIL_PICS_URL");
        public final static Property Channel = new Property(19, Long.class, "channel", false, "CHANNEL");
    }

    private DaoSession daoSession;

    private Query<Message> channel_MessageListQuery;

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MessageTable\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_SERVER\" INTEGER NOT NULL UNIQUE ," + // 1: id_server
                "\"MSG_CHANNEL_ID\" INTEGER," + // 2: msg_channel_id
                "\"MSG_TITLE\" TEXT," + // 3: msg_title
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 4: msg_type
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 5: create_time
                "\"DEAD_TIME\" INTEGER NOT NULL ," + // 6: dead_time
                "\"ReadedFlag\" INTEGER NOT NULL ," + // 7: is_read
                "\"IS_IN_LIST\" INTEGER NOT NULL ," + // 8: is_in_list
                "\"NOTIFY_TYPE\" INTEGER NOT NULL ," + // 9: notify_type
                "\"POPUP_URL\" TEXT," + // 10: popup_url
                "\"IS_POP\" INTEGER NOT NULL ," + // 11: is_pop
                "\"IS_SERVER_DELETED\" INTEGER NOT NULL ," + // 12: is_server_deleted
                "\"POPUP_BG_COLOR\" TEXT," + // 13: popup_bg_color
                "\"GOTO_TYPE\" INTEGER NOT NULL ," + // 14: gotoType
                "\"GOTO_MODE\" INTEGER NOT NULL ," + // 15: gotoMode
                "\"GOTO_PARAM\" TEXT," + // 16: gotoParam
                "\"DETAIL_BTN_TEXT\" TEXT," + // 17: detailBtn_text
                "\"DETAIL_PICS_URL\" TEXT," + // 18: detailPics_url
                "\"CHANNEL\" INTEGER);"); // 19: channel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MessageTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getId_server());
 
        Long msg_channel_id = entity.getMsg_channel_id();
        if (msg_channel_id != null) {
            stmt.bindLong(3, msg_channel_id);
        }
 
        String msg_title = entity.getMsg_title();
        if (msg_title != null) {
            stmt.bindString(4, msg_title);
        }
        stmt.bindLong(5, entity.getMsg_type());
        stmt.bindLong(6, entity.getCreate_time());
        stmt.bindLong(7, entity.getDead_time());
        stmt.bindLong(8, entity.getIs_read());
        stmt.bindLong(9, entity.getIs_in_list());
        stmt.bindLong(10, entity.getNotify_type());
 
        String popup_url = entity.getPopup_url();
        if (popup_url != null) {
            stmt.bindString(11, popup_url);
        }
        stmt.bindLong(12, entity.getIs_pop());
        stmt.bindLong(13, entity.getIs_server_deleted());
 
        String popup_bg_color = entity.getPopup_bg_color();
        if (popup_bg_color != null) {
            stmt.bindString(14, popup_bg_color);
        }
        stmt.bindLong(15, entity.getGotoType());
        stmt.bindLong(16, entity.getGotoMode());
 
        String gotoParam = entity.getGotoParam();
        if (gotoParam != null) {
            stmt.bindString(17, gotoParam);
        }
 
        String detailBtn_text = entity.getDetailBtn_text();
        if (detailBtn_text != null) {
            stmt.bindString(18, detailBtn_text);
        }
 
        String detailPics_url = entity.getDetailPics_url();
        if (detailPics_url != null) {
            stmt.bindString(19, detailPics_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getId_server());
 
        Long msg_channel_id = entity.getMsg_channel_id();
        if (msg_channel_id != null) {
            stmt.bindLong(3, msg_channel_id);
        }
 
        String msg_title = entity.getMsg_title();
        if (msg_title != null) {
            stmt.bindString(4, msg_title);
        }
        stmt.bindLong(5, entity.getMsg_type());
        stmt.bindLong(6, entity.getCreate_time());
        stmt.bindLong(7, entity.getDead_time());
        stmt.bindLong(8, entity.getIs_read());
        stmt.bindLong(9, entity.getIs_in_list());
        stmt.bindLong(10, entity.getNotify_type());
 
        String popup_url = entity.getPopup_url();
        if (popup_url != null) {
            stmt.bindString(11, popup_url);
        }
        stmt.bindLong(12, entity.getIs_pop());
        stmt.bindLong(13, entity.getIs_server_deleted());
 
        String popup_bg_color = entity.getPopup_bg_color();
        if (popup_bg_color != null) {
            stmt.bindString(14, popup_bg_color);
        }
        stmt.bindLong(15, entity.getGotoType());
        stmt.bindLong(16, entity.getGotoMode());
 
        String gotoParam = entity.getGotoParam();
        if (gotoParam != null) {
            stmt.bindString(17, gotoParam);
        }
 
        String detailBtn_text = entity.getDetailBtn_text();
        if (detailBtn_text != null) {
            stmt.bindString(18, detailBtn_text);
        }
 
        String detailPics_url = entity.getDetailPics_url();
        if (detailPics_url != null) {
            stmt.bindString(19, detailPics_url);
        }
    }

    @Override
    protected final void attachEntity(Message entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // id_server
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // msg_channel_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg_title
            cursor.getInt(offset + 4), // msg_type
            cursor.getLong(offset + 5), // create_time
            cursor.getLong(offset + 6), // dead_time
            cursor.getInt(offset + 7), // is_read
            cursor.getInt(offset + 8), // is_in_list
            cursor.getInt(offset + 9), // notify_type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // popup_url
            cursor.getInt(offset + 11), // is_pop
            cursor.getInt(offset + 12), // is_server_deleted
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // popup_bg_color
            cursor.getInt(offset + 14), // gotoType
            cursor.getInt(offset + 15), // gotoMode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // gotoParam
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // detailBtn_text
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // detailPics_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_server(cursor.getInt(offset + 1));
        entity.setMsg_channel_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMsg_title(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsg_type(cursor.getInt(offset + 4));
        entity.setCreate_time(cursor.getLong(offset + 5));
        entity.setDead_time(cursor.getLong(offset + 6));
        entity.setIs_read(cursor.getInt(offset + 7));
        entity.setIs_in_list(cursor.getInt(offset + 8));
        entity.setNotify_type(cursor.getInt(offset + 9));
        entity.setPopup_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_pop(cursor.getInt(offset + 11));
        entity.setIs_server_deleted(cursor.getInt(offset + 12));
        entity.setPopup_bg_color(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setGotoType(cursor.getInt(offset + 14));
        entity.setGotoMode(cursor.getInt(offset + 15));
        entity.setGotoParam(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDetailBtn_text(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDetailPics_url(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messageList" to-many relationship of Channel. */
    public List<Message> _queryChannel_MessageList(Long msg_channel_id) {
        synchronized (this) {
            if (channel_MessageListQuery == null) {
                QueryBuilder<Message> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Msg_channel_id.eq(null));
                channel_MessageListQuery = queryBuilder.build();
            }
        }
        Query<Message> query = channel_MessageListQuery.forCurrentThread();
        query.setParameter(0, msg_channel_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChannelDao().getAllColumns());
            builder.append(" FROM MessageTable T");
            builder.append(" LEFT JOIN CHANNEL T0 ON T.\"CHANNEL\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Message loadCurrentDeep(Cursor cursor, boolean lock) {
        Message entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Channel channel = loadCurrentOther(daoSession.getChannelDao(), cursor, offset);
        entity.setChannel(channel);

        return entity;    
    }

    public Message loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Message> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Message> list = new ArrayList<Message>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Message> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Message> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
